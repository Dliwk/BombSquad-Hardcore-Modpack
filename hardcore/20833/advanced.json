import bs; import os
from json import dump as save_json; from json import load as load_json

env = bs.getEnvironment()

# written by drov.drov

debug = 1

STANDART_SETTINGS={"lobby_connect_menu": False, 
    "admins_prefix": False, 
    "timer_the_disappearance_of_the_effect": True, 
    "powerup_lighting": True, 
    "timer_the_disappearance_of_the_powerup": True, 
    "timer_before_the_bomb_explode": True, 
    "chat_commands_enabled": True, 
    "disable_powerups": False, 
    "auto-update": True, 
    "internet_tab_search_text":"", 
    "in_menu_author_name": True, 
    "party_search_log": False,
    "admins":[], 
    "vips":[], 
    "hosts": [], 
    "muted": [], 
    "prefixes":{}, 
    "banned": {}, 
    "skins": {}, 
    "exclude_powerups": []}
SETTINGS_PATH = (env["userScriptsDirectory"] + os.path.sep + "settings.json")
del env 

def check_settings():
    if not os.path.exists(SETTINGS_PATH): rewrite_settings()
    else:
        data = get_settings()
        for i in STANDART_SETTINGS:
            if data.get(i) is None:
                add_new_settings(data=data); break

class Settings(object):
    settings = STANDART_SETTINGS
    def __init__(self, path=None):
        if path is None or not os.path.exists(path): return None
        self.p = path; self.m = 0
        self.get_settings()
    def get_settings(self):
        if not hasattr(self, 'p') or not os.path.exists(self.p): return self.settings
        m = os.path.getmtime(self.p)
        if m == self.m: return self.data
        try: data = load_json(open(self.p))
        except: data = self.settings
        self.data = data 
        return data
    def get_setting(self, key, default_value=True):
        return self.get_settings().get(key, default_value)
    def set_settings(self, data):
        if not isinstance(data, dict): raise ValueError()
        try: f = open(self.p, 'w+')
        except: 
            print("no such file: "+self.p+"; cann\'t save settings")
            return
        save_json(data, f, indent=4, sort_keys=True); self.m = os.path.getmtime(self.p)
        if data != self.data: self.data = data
    def set_setting(self, key, value):
        self.data.update({key: value})
        self.save()
    def update_setting(self, name, value, ignore_same=False, add=True):
        data = self.get_setting(name, value)
        if isinstance(data, list):
            if add and (value not in data or ignore_same): data.append(value)
            elif not add and value in data: data.remove(value)
        elif isinstance(data, dict): 
            if add: data.update(value)
            else:
                if isinstance(value, dict): value = value.keys()
                for val in value: data.pop(val)
        elif isinstance(data, set): 
            if add: data.add(value)
            else: data.remove(value)
        elif data is None: 
            for c in ["this settings doesn\'t exists: "+name, ", but programm try to update it"]: print(c)
            return
        else:
            try: data = value
            except: pass
        self.set_setting(name, data)
    def save(self):
        self.set_settings(data=self.data)

_settings = Settings(path=SETTINGS_PATH)
def set_setting(name='example', value=True):
    # change setting value
    _settings.set_setting(key=name, value=value)
    if debug > 0: print("set setting \""+name+"\" to "+str(value))

def set_settings(data={}):
    # set settings-file contents
    _settings.set_settings(data=data)

def update_setting(name='example', value='test', add=True):
    # updates values of some settings
    # use only for existing ones
    _settings.update_setting(name=name, value=value, add=add)
    
def get_setting(name='example', default_value='test'):
    # returns value of choiced setting
    if debug > 0: print("get setting \""+name+"\" using "+str(default_value))
    return _settings.get_setting(key=name, default_value=default_value)
    
def get_settings():
    # returns settings-file contents
    if debug > 0: print("get_settings")
    return _settings.get_settings()

def add_new_settings(data={}):
    for i in data: STANDART_SETTINGS.update({i: data[i]})
    rewrite_settings(data=STANDART_SETTINGS)

def rewrite_settings(data={}):
    save_json(data, open(SETTINGS_PATH, "w+"), indent=4, sort_keys=True)

def format_spaces(msg=''):
    # from this:
    #            test    test  test  , test  
    # to this:
    #            test test test , test
    if "  " in msg: 
        while True:
            msg=msg.replace("  ", " ")
            if "  " not in msg: break
    if msg.endswith(" "): msg=msg[0:-1]
    if msg.startswith(" "): msg=msg[1:]
    if msg.startswith("/") and len(msg.split("/")) > 1 and msg.split("/")[1].startswith(" "): msg=msg[0]+msg[2:]
    return msg
  
def text_split(words=[], words_count=4, split_symbol=', ', string_symbol='\n', stroke_on_end=True):
    # from this: 
    #           test, test, test, test, test, test
    # to this: 
    #           test, test, test, test
    #           test, test
    msg = ''
    for i in range(len(words)):
        if int(i / words_count) > 0 and i % words_count == 0: msg += words[i]+string_symbol
        else: 
            msg = msg+words[i]+split_symbol if i != (len(words)-1) else msg+words[i]
    if stroke_on_end:
        if not msg.endswith(string_symbol): msg += string_symbol
    else:
        if msg.endswith(string_symbol): msg = msg[0:-1]
    return msg

check_settings()