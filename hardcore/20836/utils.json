import bs, bsInternal
import random

from .skins import delete_skin, change_skin
from .advanced import set_setting, update_setting, \
    get_settings, get_setting, format_spaces, \
    text_split

from bsInternal import _getForegroundHostActivity as get_activity
from bsMap import _maps, getFilteredMapName
from inspect import isclass as is_class

# written by drov.drov

MAPS = _maps
MAPS_TINT = {
    "Doom Shroom": (0.82, 1.10, 1.15), 
    "Hockey Stadium": (1.2,1.3,1.33),
    "Football Stadium": (1.3, 1.2, 1.0), 
    "Big G": (1.1, 1.2, 1.3), 
    "Roundabout": (1.0, 1.05, 1.1), 
    "Monkey Face": (1.1, 1.2, 1.2), 
    "Bridgit": (1.1, 1.2, 1.3), 
    "Zigzag": (1.0, 1.15, 1.15), 
    "The Pad": (1.1, 1.1, 1.0), 
    "Lake Frigid": (1, 1, 1), 
    "Tip Top": (0.8, 0.9, 1.3), 
    "Crag Castle": (1.15, 1.05, 0.75), 
    "Tower D":(1.15, 1.11, 1.03), 
    "Happy Thoughts": (1.3, 1.23, 1.0), 
    "Step Right Up": (1.2, 1.1, 1.0), 
    "Courtyard": (1.2, 1.17, 1.1), 
    "Rampage": (1.2, 1.1, 0.97)
}
for m in MAPS: 
    if m not in MAPS_TINT: MAPS_TINT.update({m: (1, 1, 1)})

TINT = None
MOTION = None
NORMALIZED_TINT = None

def get_normal_tint():
    global NORMALIZED_TINT
    try: name = getFilteredMapName(get_activity()._mapType.name)
    except: name = getFilteredMapName("Football Stadium")
    finally: 
        NORMALIZED_TINT = tint = MAPS_TINT.get(name, (1, 1, 1))
        return tint  

def get_motion():
    global MOTION
    try: 
        activity = get_activity()
        if not hasattr(activity, '_motion'): motion = activity._isSlowMotion
        else: motion = activity._motion
    except: motion = False
    finally: 
        MOTION = motion
        return motion

def get_tint():
    global TINT
    try: tint = getattr(get_activity(), '_tint', None)
    except: tint = None
    finally: 
        if tint is None: tint = get_normal_tint()
        TINT = tint
        return tint

def set_tint(tint):
    global TINT
    if not isisntance(tint, tuple) or len(tint) != 3: raise ValueError()
    activity = get_activity()
    if activity is not None: activity._tint = TINT = tint

def set_motion(motion):
    global MOTION
    if not isinstance(motion, bool) and not isinstance(motion, int): raise ValueError()
    activity = get_activity()
    if activity is not None: activity._motion = MOTION = bool(motion)

# called for all messages from chatCmd
def send_message(msg):
    _chatMessage(msg)

def is_num(num):
    try: int(num)
    except: return False
    else: return True

def check_account(account=None):
    return account is not None and is_account(account=account)

def is_account(account, return_account=False):
    def check(account):
        if isinstance(account, unicode):
            for icon in ['googlePlusLogo', 'gameCenterLogo', 'gameCircleLogo', \
                'ouyaLogo', 'localAccount', 'alibabaLogo', \
                'oculusLogo', 'nvidiaLogo']:
                if bs.getSpecialChar(icon) in account: return True
        return False
    if isinstance(account, str):
        try: account = account.decode('utf-8')
        except: account = unicode(account)
    result = check(account=account)
    if return_account: return account if result else None
    else: return result

def get_account_string(arg):
    if arg is not None:
        account = is_account(arg, True)
        if account is not None: return account
        else:
            a = get_activity()
            if a is not None and is_num(arg) and hasattr(a, "players") and len(a.players) > int(arg): arg = a.players[int(arg)] 
            if isinstance(arg, bs.Player) and hasattr(arg, 'getInputDevice'): 
                arg = arg.getInputDevice()
                if hasattr(arg, '_getAccountName'): return arg._getAccountName(True)
    return None
    
def find_players_and_bots():
    result=[]
    for i in bsInternal.getNodes(): 
        if i.getNodeType() == "spaz": 
            i = i.getDelegate()
            if isinstance(i, bs.PlayerSpaz) or (is_class(i.__class__) and issubclass(i.__class__, bs.SpazBot)): result.append(i)
    return result

def dayCycle():
    if get_activity() is not None:
        tint = get_tint()
        anim={0: tint, 7500:(1.25, 1.21, 1.075),
            30000: (1.25, 1.21, 1.075), 57500: (1.1, 0.86, 0.74),
            67500: (1.1, 0.86, 0.74), 90000: (0, 0.27, 0.51),
            120000: (0, 0.27, 0.51), 142500: (1.3, 1.06, 1.02),
            157500: (1.3, 1.06, 1.02), 180000: (1.3, 1.25, 1.2),
            195500: (1.3, 1.25, 1.2), 220000: tint}
        bs.animateArray(bs.getSharedObject("globals"), "tint", 3, anim, loop=True)
        
def bigger_than_zero(num=''):
    if not isinstance(num, int) and is_num(num=num): num = int(num)
    if isinstance(num, int) and num > 0: return True
    return False

class BoxFactory(object):
    def __init__(self):
        self.model = bs.getModel('tnt')
        self.textures = (bs.getTexture("flagColor"), 
            bs.getTexture("frameInset"))
        self.materials = (bs.getSharedObject('footingMaterial'), 
            bs.getSharedObject('objectMaterial'))
    def getRandomTexture(self):
        return random.choice(self.textures)

class Box(bs.Actor):
    def __init__(self, position = (0, 5, 0), scale = 1.35, owner = None):
        bs.Actor.__init__(self)
        factory = self.getFactory()

        if owner is None: owner = bs.Node(None)
        self.owner = owner

        self.node = bs.newNode('prop', delegate=self, attrs={
            'position': position,
            'velocity': (0, 0, 0),
            'model': factory.model,
            'modelScale': scale,
            'body': 'crate',
            'bodyScale': scale,
            'shadowSize': 0.26 * scale,
            'colorTexture': factory.getRandomTexture(),
            'reflection': 'soft',
            'reflectionScale': [0.23],
            'materials': factory.materials})

    def getFactory(cls):
        activity = bs.getActivity()
        if activity is None: raise Exception("no current activity")
        if hasattr(activity, '_sharedBoxFactory'): return activity._sharedBoxFactory
        else:
            f = activity._sharedBoxFactory = BoxFactory()
            return f

    def handleMessage(self, msg):
        self._handleMessageSanityCheck()
        if isinstance(msg, bs.OutOfBoundsMessage): self.node.delete()
        elif isinstance(msg, bs.DieMessage): self.node.delete()
        elif isinstance(msg, bs.HitMessage):
            self.node.handleMessage("impulse", msg.pos[0], msg.pos[1], msg.pos[2], msg.velocity[0], msg.velocity[1],
                msg.velocity[2], msg.magnitude * 0.2, msg.velocityMagnitude, msg.radius, 0,
                msg.forceDirection[0], msg.forceDirection[1], msg.forceDirection[2])
        else: bs.Actor.handleMessage(self, msg)