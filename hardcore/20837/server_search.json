import bs, bsUI, bsInternal
from bsUI import _g_ping_thread_count, gPingErrorReported, gTitleColor, gMedUI, gSmallUI

SET_TAB = bsUI.GatherWindow._setInternetTab

# written by drov.drov

def _updateParties(self, force=True):
    search_val = getattr(self, '_search_text', '')
    self._public_parties = dict([entry for entry in self._public_parties_all.items() if search_val in str(entry[1]['name'].encode('utf-8')).lower()])
    if force: self._first_public_party_list_rebuild_time = None
    self._rebuild_public_party_list()

def _search(self, request=""):
    try: from hardcore.advanced import format_spaces
    except: format_spaces = lambda msg='' : msg
    self._search_text = format_spaces(request.lower())
    _updateParties(self)

def _start_search(self):
    if getattr(self, '_searchField', None) is None: 
        request=bs.getConfig().get("internet_tab_search_text", "")
    else: 
        request = str(bs.textWidget(query=self._searchField).encode("utf-8"))
    bs.getConfig()["internet_tab_search_text"] = request
    bs.writeConfig()
    _search(self, request=request)

def _setInternetTab(self, value, playSound=False):
    for attr in ['_searchField','_searchButton']:
        widget = getattr(self, attr, None)
        if widget is not None:
            widget.delete()
            delattr(self, attr)
    if value == 'join':
        self._public_parties_all = {}
        y = (548, 552)
        if gMedUI: y = (430, 434)
        if gSmallUI: y = (332, 336)
        w = self._scrollWidth * 0.5
        search_text = bs.getConfig().get("internet_tab_search_text", "")
        try: self._search_text = str(search_text.encode('utf-8'))
        except: self._search_text = str(bs.Lstr(value=search_text).evaluate().encode('utf-8'))
        self._searchField = t = bs.textWidget(
            parent=self._tabContainer, editable=True, size=(120, 40),
            position=(w + 285, 7 + y[0]), text=bs.Lstr(value=search_text).evaluate(),
            maxWidth=494, shadow=0.3, flatness=1.0,
            description=bs.Lstr(value="Please enter string to search"),
            autoSelect=True, vAlign='center', cornerScale=0.7, color=(1, 1, 1))
        self._searchButton = b = bs.buttonWidget(
            parent=self._tabContainer,
            position=(w + 380, 7 + y[1]),
            size=(25, 25),
            color=gTitleColor, textScale=0, onActivateCall=bs.Call(_start_search, self))
        bs.textWidget(edit=t, onReturnPressCall=b.activate)
    SET_TAB(self, value=value, playSound=playSound)

def _onPublicPartyQueryResult(self, result):
    with bs.Context('UI'):
        if not hasattr(self, '_public_parties_all'): self._public_parties_all = self._public_parties
        status_text = getattr(self, '_internet_join_status_text', None)
        if status_text is not None and status_text.exists():
            if bsInternal._getAccountState() != 'SIGNED_IN':
                bs.textWidget(edit=status_text, text=bs.Lstr(resource='notSignedInText'))
            else:
                if result is None: bs.textWidget(edit=status_text, text=bs.Lstr(resource='errorText'))
                else: bs.textWidget(edit=status_text, text='')

        if result is not None: partiesIn = result['l']
        else: partiesIn = []

        for party in self._public_parties_all.values(): party['claimed'] = False

        for partyIn in partiesIn:
            partyKey = partyIn['a']+'_'+str(partyIn['p'])
            party = self._public_parties_all.get(partyKey)
            if party is None:
                index = getattr(self, '_nextPublicPartyEntryIndex', 0)
                self._nextPublicPartyEntryIndex = index + 1
                party = self._public_parties_all[partyKey] = {
                    'address': partyIn.get('a'),
                    'nextPingTime': bs.getRealTime()+partyIn['pd'],
                    'ping': None,
                    'index': index,
                }
            party['queue'] = partyIn.get('q')
            party['port'] = partyIn.get('p')
            party['name'] = partyIn['n']
            party['size'] = partyIn['s']
            party['language'] = partyIn['l']
            party['sizeMax'] = partyIn['sm']
            party['claimed'] = True
            party['pingInterval'] = partyIn['pi']
            party['statsAddr'] = partyIn['sa']
        self._public_parties_all = dict([entry for entry in self._public_parties_all.items() if entry[1]['claimed']])
        _updateParties(self, False)

bsUI.GatherWindow._setInternetTab = _setInternetTab
bsUI.GatherWindow._onPublicPartyQueryResult = _onPublicPartyQueryResult