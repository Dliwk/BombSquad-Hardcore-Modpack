import bs, httplib, urllib2
import os, shutil; import json
from inspect import isclass as is_class
try: import hardcore
except: INSTALLED_VERSION = 0
else: INSTALLED_VERSION = hardcore.get_version(True) if hasattr(hardcore, 'get_version') else 0
if INSTALLED_VERSION is None: INSTALLED_VERSION = 0
try: from hardcore.advanced import get_settings
except: get_settings = lambda : {}

msg_color = (1, 0.85, 0)
debug = 1

env = bs.getEnvironment()
platform = env['platform']
USER_SCRIPTS_PATH = env['userScriptsDirectory']
DOWNLOAD_DIRECTORY_NAME = 'downloads'
SYSTEM_SCRIPTS_PATH = env['systemScriptsDirectory'] if platform not in ['android'] else '/data/data/net.froemling.bombsquad/files/bombsquad_files/data/scripts'
SYSTEM_DIR = os.path.sep.join(SYSTEM_SCRIPTS_PATH.split(os.path.sep)[0:-1])
GITHUB_BRANCH = 'https://github.com/DrovGamedev/BombSquad-Hardcore-Modpack/raw/master' if hasattr(httplib, 'HTTPS') and hasattr(urllib2, 'ssl') else 'http://raw.githack.com/DrovGamedev/BombSquad-Hardcore-Modpack/master'
SETTINGS = get_settings()
ERRORS = []
DOWNLOADS = []
del env

if debug > 0:
    def error_log(error=None):
        global ERRORS 
        ERRORS.append(error)
        if debug > 1: print(error)
else: error_log = lambda error=None : True

def has_internet_connection():
    import socket
    s = socket.socket(2, 2)
    s.settimeout(1.0)
    try: s.connect(("8.8.8.8", 80))
    except Exception: return False
    else: s.close(); return True

class _DownloadFinished(object):
    def __init__(self, url, path, call=None, args=()):
        global DOWNLOADS
        self.filename = path.split(os.path.sep)[-1]
        DOWNLOADS.append(self.filename)
        self.u = url
        self.p = path
        if debug > 0:
            txt = "Successfully downloaded: " + self.filename
            print(txt)
            if debug > 1: bs.screenMessage(txt, color=msg_color)
        if call is not None: call(*args)

def download(url, path, rewrite=True, end_call=None, *args):
    if not rewrite and os.path.exists(path): return
    try: 
        f = open(path, 'w+')
        u = urllib2.urlopen(url)
    except Exception as E: 
        print("download error; ")
        error_log(E); return
    def on_end():
        f.close(); u.close()
        _DownloadFinished(url, path, end_call, args)
    def chunk():
        try: c = u.read(1048576)
        except Exception as E: 
            c = ''
            if debug > 1:
                for i in ["chunk lost: ", E, ""]: print(i)
        if not c: on_end(); return
        f.write(c); f.flush()
        bs.realTimer(1000, chunk)
    chunk()

def md():
    if debug > 0: print("creating downloads dir...")
    path = USER_SCRIPTS_PATH + os.path.sep + DOWNLOAD_DIRECTORY_NAME
    if not os.path.exists(path): os.makedirs(path)
    if debug > 0: print("dir created")

def restart_msg():
    if debug > 1: print("send restart message...")
    bs.screenMessage(bs.Lstr(resource='settingsWindowAdvanced.mustRestartText').evaluate(), color = msg_color)

def update(version=None, ignore_old=True):
    global DOWNLOADS
    DOWNLOADS = []
    if not has_internet_connection(): 
        if debug > 1: print("no internet connection")
        return
    filename = 'versions.json'; md()
    def get_files(*args):
        path = args[0]; url = args[1]
        if not os.path.exists(path): return
        f = open(path, 'r')
        try: data = json.load(f)
        except: data = {}
        if version is None and 'last_version' in data: v = str(data['last_version'])
        elif str(version) in data: v = str(version)
        else: return
        if v not in data: return
        if ignore_old and INSTALLED_VERSION >= v: return
        url = (GITHUB_BRANCH+'/')
        path = (USER_SCRIPTS_PATH + os.path.sep); temp = (SYSTEM_SCRIPTS_PATH + os.path.sep)
        def update_file(*args):
            src = args[0]; dst = args[1]; cnt_end = args[2]
            for c in args: print("args: " + c)
            if os.path.exists(dst): 
                try: os.remove(dst)
                except: pass
            try: shutil.move(src, dst)
            except: pass
            print("update " + dst)
            if len(DOWNLOADS)-1 == cnt_end: 
                restart_msg()
                t = USER_SCRIPTS_PATH + os.path.sep + 'installer.py'
                if os.path.exists(t): os.remove(t)
        cnt_end = len(data[v])
        for u in data[v]:
            u = str(u.encode('utf-8')); file = str(data[v][u].encode('utf-8'))
            file = file.replace(":", os.path.sep); u = (url + u)
            if debug > 0: 
                txt = "try to download from url: " + u
                print(txt)
                if debug > 1: bs.screenMessage(txt, color=msg_color)
            filename = file.split(os.path.sep)[-1]
            p = path + DOWNLOAD_DIRECTORY_NAME + os.path.sep + file; t = temp + file
            for c in [p, t]:
                c = c.replace(os.path.sep + filename, "")
                if debug > 1: print("dir: " + c)
                if not os.path.exists(c):
                    try: os.makedirs(c)
                    except: pass
            if debug > 1:
                for r in ["download path: " + p, "temp_path: " + t]: print(r)
            download(u, p, True, update_file, p, t, cnt_end)
        
    if debug > 0: print("try to download "+filename)
    url, path = GITHUB_BRANCH+'/'+filename, USER_SCRIPTS_PATH+os.path.sep+filename
    download(url, path, True, get_files, path, url)

def delete():
    path = SYSTEM_SCRIPTS_PATH + os.path.sep + 'hardcore'
    if not os.path.exists(path): return
    try: shutil.rmtree(path)
    except: pass
    delete_files = ['installer.py','script_replacer.py','ui.py','mainmenu.py']
    temp_files = ['bsUI.temp','bsMainMenu.temp']
    for file in os.listdir(USER_SCRIPTS_PATH):
        if file in delete_files:
            try: os.remove(USER_SCRIPTS_PATH + os.path.sep + file)
            except: pass
    for file in os.listdir(SYSTEM_SCRIPTS_PATH):
        if file in temp_files:
            p = SYSTEM_SCRIPTS_PATH + os.path.sep
            try: shutil.move(p + file, p + file.replace('.temp', '.py'))
            except: pass
    restart_msg()

def update_modpack(version=None, ignore_old=True):
    def a():
        bs.screenMessage("download starts now\nplease, don\'t quit from game", color=msg_color)
        bs.realTimer(3000, bs.Call(update, version, ignore_old))
    bs.realTimer(5000, bs.Call(a))

if SETTINGS.get("auto-update", True): update_modpack()