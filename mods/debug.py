# Copyright (c) 2020 Daniil Rakhov
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

# ba_meta require api 6
from __future__ import annotations
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from typing import Optional

from ba import Plugin
from threading import Thread

import _ba
import time
import os


class Log:
    def __init__(self,
                 path: Optional[str] = None,
                 coffee_break: float = 1.0,
                 debug_level: int = 0):
        self._file: Optional[open] = None
        self._filename: Optional[str] = None
        self.coffee_break: float = max(0.0, coffee_break)
        self.debug = debug_level
        self._main_thread: Optional[Thread] = None
        self.path: str = path
        if self.path is None:
            self.path = self.default_path
        if self.debug:
            print('Debug path:', self.path,
                  '\nCoffee break:', self.coffee_break)

    @property
    def default_path(self) -> str:
        path = _ba.app.python_directory_user + os.path.sep + 'logs'
        if not os.path.exists(path):
            os.mkdir(path)
        path += os.path.sep + self.default_name
        return path

    @property
    def default_name(self) -> str:
        if not self._filename:
            name = 'log-'
            for i, c in enumerate(time.strptime(time.ctime())[0:5]):
                c = f'0{c}' if c < 10 else str(c)
                name += c if not i else ('_' + c)
            name += '.txt'
            self._filename = name
            if self.debug:
                print('Generated filename:', name)
        return self._filename

    @property
    def file(self) -> Optional[open]:
        if not self._file or self._file.closed:
            try:
                f = open(self.path,
                         mode='w+',
                         buffering=1)
                f.write('''
------------------------------------------------------------------------------------
This file was automatically generated by debug-system (debug.py)
------------------------------------------------------------------------------------
''')
                f.flush()
            except Exception as exc:
                print('Opening exc:', exc)
                f = None
            self._file = f
        return self._file

    def start(self) -> None:
        if not self._main_thread:
            def run() -> None:
                log = ''
                while True:
                    _log = _ba.getlog()
                    if log != _log:
                        f = self.file
                        if not f:
                            break
                        try:
                            f.write(f'\n\nUPDATE-LOG:\n{_log}')
                        except Exception as exc:
                            print('File write exc', exc)
                            self._file = None
                            continue
                        else:
                            log = _log
                            f.flush()
                    time.sleep(self.coffee_break)
            self._main_thread = Thread(target=run)
            self._main_thread.start()


def i_was_imported() -> bool:
    result = bool(getattr(_ba.app, '_debug_enabled', False))
    setattr(_ba.app, '_debug_enabled', True)
    return result


def main() -> None:
    if i_was_imported():
        return
    log = Log(debug_level=1)
    log.start()
    _ba.reset_game_activity_tracking()


# ba_meta export plugin
class Debug(Plugin):
    def on_app_launch(self) -> None:
        main()
