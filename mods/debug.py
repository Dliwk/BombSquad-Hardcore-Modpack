# Copyright (c) 2020 Daniil Rakhov
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

# ba_meta require api 6
import time, os, threading
import ba, _ba

def _log(path: str) -> open:
    f = open(path, 'w+')
    fw = f.write
    f.write = lambda msg : fw(
        '-' * 53 + '\n' +
        'This file was automatically generated by debug-system\n' + 
        '-' * 53 + '\n\n' + 
        msg)
    return f

def get_log_filename() -> str:
    t = time.strptime(time.ctime())
    t = [str(i) for i in [
        t.tm_year, t.tm_mon,
        t.tm_mday, t.tm_hour,
        t.tm_min]
    ]
    t = ('log-' + '_'.join([i if len(i) > 1 else 
        '0' + i for i in t]))
    return t

def get_log_file_path() -> str:
    path = ba.app.python_directory_user + os.path.sep + 'logs'
    if not os.path.exists(path):
        os.mkdir(path)
    path += os.path.sep + get_log_filename()
    return path

def open_log() -> open:
    return _log(get_log_file_path())

class LogWriterThread(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self, 
            daemon = True)
    def run(self) -> None:
        f = open_log()
        log = ''
        while True:
            log_ = _ba.getlog()
            if log_ != log:
                log = log_
                try:
                    f.write(log)
                    f.flush()
                except Exception as exc: 
                    f = open_log()
                    f.write(str(exc))
                    f.flush()
            time.sleep(1.0)

def i_was_imported() -> bool:
    result = bool(getattr(ba.app, '_debug_enabled', False))
    setattr(ba.app, '_debug_enabled', True)
    return result

def main() -> None:
    if i_was_imported():
        return
    LogWriterThread().start()
    _ba.reset_game_activity_tracking()

# ba_meta export plugin
class Debug(ba.Plugin):
    def on_app_launch(self) -> None:
        main()