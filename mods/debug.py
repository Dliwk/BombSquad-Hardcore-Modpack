# Copyright (c) 2020 Daniil Rakhov
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

# ba_meta require api 6
from threading import Thread
from _ba import getlog, env, app, \
    reset_game_activity_tracking
from ba import Plugin

import time, string, os

DEBUG_LEVEL = 1

def get_log_file_name() -> str:
    t = time.strptime(time.ctime())
    t = 'log-' + '_'.join([i if len(i) > 1 else 
        '0' + i for i in [
            str(t.tm_year), 
            str(t.tm_mon),
            str(t.tm_mday),
            str(t.tm_hour), 
            str(t.tm_min)
    ]])
    return t

def get_log_file_path() -> str:
    path = app.python_directory_user + os.path.sep + 'logs'
    if not os.path.exists(path):
        os.mkdir(path)
    path += os.path.sep + get_log_file_name()
    return path

def open_log() -> open:
    f = open(get_log_file_path(), 'w+')
    f.write(
        '-' * 53 + '\n' +
        'This file was automatically generated by debug-system\n' + 
        '-' * 53 + '\n\n'
    )
    return f

class LogWriterThread(Thread):
    def __init__(self):
        Thread.__init__(self, daemon=True)
    def run(self) -> None:
        f = open_log()
        log = ''
        while True:
            _log = getlog()
            if _log != log:
                log = _log
                try:
                    f.write(log)
                    f.flush()
                except Exception as exc: 
                    f = open_log()
                    f.write(str(exc))
                    f.flush()
            time.sleep(1.0)

def run() -> LogWriterThread:
    thread = LogWriterThread()
    thread.start()
    return thread

def main() -> None:
    if DEBUG_LEVEL:
        globals().update({'log_writer': run()})
    reset_game_activity_tracking()

# ba_meta export plugin
class Debug(Plugin):
    def on_app_launch(self):
        main()